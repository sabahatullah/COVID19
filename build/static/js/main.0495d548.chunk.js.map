{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","death","url","fetchData","country","a","changeableURL","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","console","log","barChart","backgroundColor","options","legend","display","title","text","CountryPicker","handleCountryChange","setCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","id","key","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0495d548.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"death\":\"Cards_death__207V6\"};","import React from 'react';\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\n\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\n  // const Cards = ({data}) => {\n   \n  //  console.log(data)\n    \n    if(!confirmed){\n      return 'Loading..'\n    }\n   return(\n        <div className={styles.container}>\n          <Grid container justify=\"center\">\n              <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                <CardContent>\n                  <Typography color=\"textSecondary\" gutterBottom>Infected\n                  </Typography>\n                  <Typography variant=\"h5\">                    \n                      <CountUp start={0} end={confirmed.value} duration={2.5} separator=','></CountUp>\n                  </Typography>\n                  <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                  <Typography variant=\"body2\">Active Cases</Typography>\n                </CardContent>\n              </Grid>\n              <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n              \n              <CardContent>\n                  <Typography color=\"textSecondary\" gutterBottom>Recovered\n                  </Typography>\n                  <Typography variant=\"h5\">                    \n                      <CountUp start={0} end={recovered.value} duration={2.5} separator=','></CountUp>\n                  </Typography>\n                  <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                  <Typography variant=\"body2\">Recovery Cases</Typography>\n                </CardContent>\n              </Grid>\n              <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.death)}>\n              \n              <CardContent>\n                  <Typography color=\"textSecondary\" gutterBottom>Deaths\n                  </Typography>\n                  <Typography variant=\"h5\">                    \n                      <CountUp start={0} end={deaths.value} duration={2.5} separator=','></CountUp>\n                  </Typography>\n                  <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                  <Typography variant=\"body2\">Death Cases</Typography>\n                </CardContent>\n              </Grid>\n\n          </Grid>\n        </div>\n    )\n\n\n}\n\nexport default Cards;","import axios from 'axios';\n\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async(country) => {\n    let changeableURL = url;\n\n    if(country){\n        changeableURL = `${url}/countries/${country}`;\n    }\n\n    try{\n        \n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableURL);\n        // const data = await axios.get(url);\n        \n        return { confirmed, recovered, deaths, lastUpdate }\n        // return {data};\n        \n    }catch(error){\n\n    }\n}\n\nexport const fetchDailyData = async() => {\n    try{\n        const {data} = await axios.get( `${url}/daily`);\n        // console.log(data)\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed:dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }))\n        return modifiedData\n    }catch(error){\n\n    }\n}\n\nexport const fetchCountries = async() => {\n    try{\n        const {data: {countries}} = await axios.get(`${url}/countries`);\n        // console.log(countries);\n\n        return countries.map((country)=>country.name)\n    }catch(error){\n\n    }\n\n}\n\n","import React, {useState, useEffect} from 'react';\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport styles from './Chart.module.css';\nimport { fetchDailyData } from '../../api';\nimport {Line, Bar} from 'react-chartjs-2';\n\nconst Chart = ({data:{confirmed, recovered, deaths}, country}) => {\n   \n    const [dailyData, setDailyData] = useState({});\n\n    useEffect(() => {\n        const fetchAPI = async() =>{\n            setDailyData(await fetchDailyData());\n\n        }\n        fetchAPI();\n\n        // console.log(dailyData)\n    }, []);\n\n    const lineChart = (\n        dailyData.length \n        ? (<Line data={{\n            labels:dailyData.map(({date}) => date),\n            datasets:[{\n                data:dailyData.map(({confirmed}) => confirmed),\n                label: 'Infected',\n                borderColor: '#3333ff',\n                fill:true,\n\n            }, {\n                data:dailyData.map(({deaths}) => deaths),\n                label: 'Deaths',\n                borderColor: '#ff0000',\n                fill:true,\n\n            }]\n        }}\n        />) : null\n    );\n        console.log(confirmed, recovered, deaths)\n    const barChart = (\n        confirmed\n        ? (\n            <Bar\n            data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [{\n                    label: 'people', \n                    backgroundColor: [\n                        'yellow','green','red'\n                    ],\n                    data: [confirmed.value, recovered.value, deaths.value]\n                }]\n            \n            }}\n            options= {{\n                legend: {display: false},\n                title: {display:true, text: `Current state is ${country}`},\n            }}\n            \n        \n            />\n        )\n        : null\n        \n    )\n\n\n    return(\n        <div className={styles.container}>\n            {country ? barChart :lineChart}\n        </div>\n    )\n\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport {fetchCountries} from '../../api';\n\nconst CountryPicker = ({handleCountryChange}) => {\n\n    const [countries, setCountries] = useState([]);\n    \n    useEffect(()=>{\n        const fetchAPI = async() => {\n            setCountries(await fetchCountries())\n        }\n\n        fetchAPI();\n\n    }, [setCountries]);\n\n\n    \n    return(\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e)=>{handleCountryChange(e.target.value)}} >\n                <option value=\"global\">Global</option>\n                {countries.map((country, id) => <option key={id} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n\n}\n\nexport default CountryPicker;","import React from 'react';\n\nimport {Cards, Chart, CountryPicker} from './components'\n\nimport styles from './App.module.css';\nimport { fetchData } from './api';\n\n// TUTORIAL FOR IMPORT/EXPORT https://www.youtube.com/watch?v=s9kNndJLOjg\n\nclass App extends React.Component{\n    state = {\n        data: {},\n        country: '',\n    }\n    // console.log(data)\n    async componentDidMount(){\n        const fetchedData = await fetchData();\n        // console.log(fetchedData);\n\n        this.setState({data:fetchedData})\n\n    }\n    handleCountryChange = async(country) => {\n        const fetchedData = await fetchData(country)\n        this.setState({data:fetchedData, country:country})\n        console.log(country);\n        \n    }\n    render(){\n        const {data, country} = this.state;\n        return(\n            <div className={styles.container}>\n                <h1>COVID 19 Updates</h1>\n                <Cards data={data} />\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <Chart data={data} country={country}></Chart>\n                \n            </div>\n\n        )\n    }\n\n\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}